# Чернеги Вікторії   Б19_д/122Б
#                   --------------------ЛІНІЙНИЙ ПОШУК-----------------------

# 1) Реалізація, в результаті якої елемент буде знайдений

A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                         # список елементів
x, y, i = 5, 1, 0                                           # x - шуканий елемент; і - змінна для проходження по рядкам; у - змінна для вирахування кількості перевірок
while i < len(A) and A[i] != x:                             # цикл для послідовної перевірки значень списку (поки і менше довжини рядка чи не знайдено співпадання з х, продовжується пошук)
    i += 1                                                  # перехід до перевірки наступної елемента списку
    y += 2                                                  # провелась перевірка, тому додаємо її до тих перевірок, які вже провелись
if i == len(A):                                             # якщо провелась перевірка по всім елементам без співпадінь з х, то елемент не знайдено
    print(f'1) Елемент не знайдений. Кількість повторів пошуку: {y}')
else:                                                       # в іншому випадку виводиться позиція і значення елемента
    print(f'1) Елемент {x} знайдений на позиції {i}. Кількість повторів пошуку: {y}')

# 2) Реалізація, в результаті якої елемент НЕ буде знайдено

A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                         # список елементів
x, y, i = 0, 1, 0                                           # x - шуканий елемент; і - змінна для проходження по рядкам; у - змінна для вирахування кількості перевірок
while i < len(A) and A[i] != x:                             # цикл для послідовної перевірки значень списку (поки і менше довжини рядка чи не знайдено співпадання з х, продовжується пошук)
    i += 1                                                  # перехід до перевірки наступної елемента списку
    y += 2                                                  # провелась перевірка, тому додаємо її до тих перевірок, які вже провелись
if i == len(A):                                             # якщо провелась перевірка по всім елементам без співпадінь з х, то елемент не знайдено
    print(f'2) Елемент не знайдений. Кількість повторів пошуку: {y-1}')
else:                                                       # в іншому випадку виводиться позиція і значення елемента
    print(f'2) Елемент {x} знайдений на позиції {i}. Кількість повторів пошуку: {y}')

# 3) Користувач вводить список і шуканий елемент сам

import numpy as np                                          # імпортування бібліотеки
A = np.zeros(10, dtype = int)                               # створення масиву, заповненого нулями
while True:                                                 # зациклення
    while True:
        try:
            x = int(input('3) Шукане число: '))                # введенення шуканого числа
            break
        except ValueError:
            print('Only numbers')
    while True:
        try:
            for i in range(10):                             # цикл для введення елементів послідовності А
                A[i] = int(input(f'Елемент послідовності A{i} = '))
            break
        except ValueError:
            print('Only numbers')

    print(A)
    i, y = 0, 1                                             # i - змінна для проходження по рядкам; y - змінна для вирахування кількості перевірок
    while i < len(A) and A[i] != x:                         # цикл для послідовної перевірки значень списку (поки і менше довжини рядка чи не знайдено співпадання з х, продовжується пошук)
        i += 1                                              # перехід до перевірки наступної елемента списку
        y += 2                                              # провелась перевірка, тому додаємо її до тих перевірок, які вже провелись
    if i == len(A):                                         # якщо провелась перевірка по всім елементам без співпадінь з х, то елемент не знайдено
        print(f'Елемент не знайдений. Кількість повторів пошуку: {y}')
    else:                                                   # в іншому випадку виводиться позиція і значення елемента
        print(f'Елемент {x} знайдений на позиції {i}. Кількість повторів пошуку: {y}')

    answer = input('Restart? Yes - 1. No - other.')
    if answer == '1':
        continue
    else:
        break


# 4) Рандомний список елементів, шукане число вводить користувач

import random
while True:                                                 # зациклення
    while True:
        try:
            x = int(input('4) Шукане число: '))             # введенення шуканого числа
            break
        except ValueError:
            print('Only numbers')

    A = np.zeros(10, dtype=int)                             # створення масиву, заповненого нулями
    for i in range(10):                                     # цикл для рандомного введення елементів послідовності А в межах (-10, 10)
        A[i] = random.randint(-10, 10)
    print(A)
    i, y = 0, 1                                             # i - змінна для проходження по рядкам; y - змінна для вирахування кількості перевірок
    while i < len(A) and A[i] != x:                         # цикл для послідовної перевірки значень списку (поки і менше довжини рядка чи не знайдено співпадання з х, продовжується пошук)
        i += 1                                              # перехід до перевірки наступної елемента списку
        y += 2                                              # провелась перевірка, тому додаємо її до тих перевірок, які вже провелись
    if i == len(A):                                         # якщо провелась перевірка по всім елементам без співпадінь з х, то елемент не знайдено
        print(f'Елемент не знайдений. Кількість повторів пошуку: {y}')
    else:                                                   # в іншому випадку виводиться позиція і значення елемента
        print(f'Елемент {x} знайдений на позиції {i}. Кількість повторів пошуку: {y}')

    answer = input('Restart? Yes - 1. No - other.')
    if answer == '1':
        continue
    else:
        break


#                   --------------------БІНАРНИЙ ПОШУК-----------------------

# 1) Реалізація, в результаті якої елемент буде знайдений

A = sorted([1, 4, 6, 2, 5, 7, 3, 10, 9, 8])                 # список елементів
x = 4                                                       # шукане число
print('1) ', A)                                             # вивід відсортованого масиву
Left, Right = 0, len(A) - 1                                 # границі пошуку
flag, y = False, 0                                          # flag - змінна, яка змінюється у випадку співпадіння х з елементом масиву

while Left <= Right and not flag:                           # цикл для проходження по масиву з умовою поки ліва границя менша або дорівнює правій і елемент не знайдений
    y += 2                                                  # додавання повторів перевірок
    k = (Left + Right)//2                                   # k - середина пошуку
    if A[k] == x:                                           # умова: якщо елемент по індексу == шуканому числу, то flag змінюється на True, що розриває цикл
        flag = True
        y += 1                                              # додавання повторів перевірок
    elif A[k] < x:                                          # якщо елемент по індексу менший шуканого числа, то ліва границя зміщується на k + 1
        Left = k + 1
        y += 2                                              # додавання повторів перевірок
    else:                                                   # якщо елемент по індексу більший шуканого числа, то права границя зміщується на k - 1
        Right = k - 1
        y +=3                                               # додавання повторів перевірок
if not flag:                                                # якщо flag не змінився, то в масиві немає шуканого числа. Вивід результату і кількості перевірок
    print(f'Не знайдено елемент. Кількість перевірок {y}')
else:                                                       # в іншому випадку вивід елементу та його позиції, а також кількості перевірок
    print(f'Елемент {x} був знайдений на позиції {k}. Кількість перевірок {y}')


# 2) Реалізація, в результаті якої елемент НЕ буде знайдено

A = sorted([1, 4, 6, 2, 5, 7, 3, 10, 9, 8])                 # список елементів
x = 3467                                                    # шукане число
print('2) ', A)                                             # вивід відсортованого масиву
Left, Right = 0, len(A) - 1                                 # границі пошуку
flag, y = False, 0                                          # flag - змінна, яка змінюється у випадку співпадіння х з елементом масиву

while Left <= Right and not flag:                           # цикл для проходження по масиву з умовою поки ліва границя менша або дорівнює правій і елемент не знайдений
    y += 2                                                  # додавання повторів перевірок
    k = (Left + Right)//2                                   # k - середина пошуку
    if A[k] == x:                                           # умова: якщо елемент по індексу == шуканому числу, то flag змінюється на True, що розриває цикл
        flag = True
        y =+ 1                                              # додавання повторів перевірок
    elif A[k] < x:                                          # якщо елемент по індексу менший шуканого числа, то ліва границя зміщується на k + 1
        Left = k + 1
        y += 2                                              # додавання повторів перевірок
    else:                                                   # якщо елемент по індексу більший шуканого числа, то права границя зміщується на k - 1
        Right = k - 1
        y += 3                                              # додавання повторів перевірок
if not flag:                                                # якщо flag не змінився, то в масиві немає шуканого числа. Вивід результату і кількості перевірок
    print(f'Не знайдено елемент. Кількість перевірок {y}')
else:                                                       # в іншому випадку вивід елементу та його позиції, а також кількості перевірок
    print(f'Елемент {x} був знайдений на позиції {k}. Кількість перевірок {y}')


# 3) Користувач вводить список і шуканий елемент сам

A = np.zeros(10, dtype=int)                                 # створення масиву, заповненого нулями
while True:                                                 # зациклення
    while True:
        try:
            x = int(input('3) Шукане число: '))             # введенення шуканого числа
            break
        except ValueError:
            print('Only numbers')
    while True:
        try:
            for i in range(10):                             # цикл для введення елементів послідовності А
                A[i] = int(input(f'Елемент послідовності A{i} = '))
            break
        except ValueError:
            print('Only numbers')

    A = sorted(A)                                           # відсортований список елементів
    print(A)                                                # вивід відсортованого масиву
    Left, Right = 0, len(A) - 1                             # границі пошуку
    flag, y = False, 0                                      # flag - змінна, яка змінюється у випадку співпадіння х з елементом масиву

    while Left <= Right and not flag:                       # цикл для проходження по масиву з умовою поки ліва границя менша або дорівнює правій і елемент не знайдений
        y += 2                                              # додавання повторів перевірок
        k = (Left + Right) // 2                             # k - середина пошуку
        if A[k] == x:                                       # умова: якщо елемент по індексу == шуканому числу, то flag змінюється на True, що розриває цикл
            flag = True
            y += 1                                          # додавання повторів перевірок
        elif A[k] < x:                                      # якщо елемент по індексу менший шуканого числа, то ліва границя зміщується на k + 1
            Left = k + 1
            y += 2                                          # додавання повторів перевірок
        else:                                               # якщо елемент по індексу більший шуканого числа, то права границя зміщується на k - 1
            Right = k - 1
            y += 3                                              # додавання повторів перевірок
    if not flag:                                            # якщо flag не змінився, то в масиві немає шуканого числа. Вивід результату і кількості перевірок
        print(f'Не знайдено елемент. Кількість перевірок {y}')
    else:                                                   # в іншому випадку вивід елементу та його позиції, а також кількості перевірок
        print(f'Елемент {x} був знайдений на позиції {k}. Кількість перевірок {y}')

    answer = input('Restart? Yes - 1. No - other.')
    if answer == '1':
        continue
    else:
        break

# 4) Рандомний список елементів, шукане число вводить користувач

A = np.zeros(10, dtype=int)                                 # створення масиву, заповненого нулями
while True:                                                 # зациклення
    while True:
        try:
            x = int(input('4) Шукане число: '))             # введенення шуканого числа
            break
        except ValueError:
            print('Only numbers')

    for i in range(10):                                     # цикл, що рандомно генерує елементи в діапазоні (-10, 10) і додає в масив
        A[i] = random.randint(-10, 10)
    A = sorted(A)                                           # відсортований список елементів
    print(A)                                                # вивід відсортованого масиву
    Left, Right = 0, len(A) - 1                             # границі пошуку
    flag, y = False, 0                                      # flag - змінна, яка змінюється у випадку співпадіння х з елементом масиву

    while Left <= Right and not flag:                       # цикл для проходження по масиву з умовою поки ліва границя менша або дорівнює правій і елемент не знайдений
        y += 2                                              # додавання повторів перевірок
        k = (Left + Right) // 2                             # k - середина пошуку
        if A[k] == x:                                       # умова: якщо елемент по індексу == шуканому числу, то flag змінюється на True, що розриває цикл
            flag = True
            y += 1                                          # додавання повторів перевірок
        elif A[k] < x:                                      # якщо елемент по індексу менший шуканого числа, то ліва границя зміщується на k + 1
            Left = k + 1
            y += 2                                          # додавання повторів перевірок
        else:                                               # якщо елемент по індексу більший шуканого числа, то права границя зміщується на k - 1
            Right = k - 1
            y += 3                                               # додавання повторів перевірок
    if not flag:                                            # якщо flag не змінився, то в масиві немає шуканого числа. Вивід результату і кількості перевірок
        print(f'Не знайдено елемент. Кількість перевірок {y}')
    else:                                                   # в іншому випадку вивід елементу та його позиції, а також кількості перевірок
        print(f'Елемент {x} був знайдений на позиції {k}. Кількість перевірок {y}')

    answer = input('Restart? Yes - 1. No - other.')
    if answer == '1':
        continue
    else:
        break


#                   --------------------ПОШУК ПІДРЯДКА-----------------------

# 1) Реалізація, в результаті якої підрядок буде знайдений

str = 'мам мама мила раму'                      # рядок
str_pattern = 'мама мила'                       # підрядок
print('1) Рядок: ', str)                        # виводи рядка і підрядка
print('   Підрядок: ', str_pattern)
i, j, y = -1, 0, 0                              # i - відповідає за всі індекси рядка, j - відповідає за всі індекси підрядка, y - кількість перевірок

while j < len(str_pattern) and i < (len(str) - len(str_pattern)):   # цикл, що проходить по рядкам
    j = 0                                   # j зануляється у зовнішньому циклі, оскільки відповідає за елементи підрядка
    i += 1                                  # перехід по елементам рядка
    y += 2                                  # додавання кількості перевірок
    while j < len(str_pattern) and str_pattern[j] == str[i+j]:      # цикл, що проходить по підрядкам
        j += 1                              # перехід по елементам підрядка
        y += 2                              # додавання кількості перевірок

if j == len(str_pattern):                       # якщо кількість проходжень по підрядку дорівнює довжині підрядка, то елемент знайдений. Виводиться позиція і кількість перевірок
    print(f'Підрядок знайдений на позиції {i}. Кількість перевірок {y-1}')
else:                                           # в іншому випадку пірядок не знайжений і виводиться кількість перевірок
    print(f'Підрядок не знайдений. Кількість перевірок {y-1}')


# 2) Реалізація, в результаті якої підрядок НЕ буде знайдено

str = 'мам мама мила раму'                      # рядок
str_pattern = 'бла бла'                       # підрядок
print('2) Рядок: ', str)                        # виводи рядка і підрядка
print('   Підрядок: ', str_pattern)
i, j, y = -1, 0, 0                              # i - відповідає за всі індекси рядка, j - відповідає за всі індекси підрядка, y - кількість перевірок

while j < len(str_pattern) and i < (len(str) - len(str_pattern)):   # цикл, що проходить по рядкам
    j = 0                                   # j зануляється у зовнішньому циклі, оскільки відповідає за елементи підрядка
    i += 1                                  # перехід по елементам рядка
    y += 2                                  # додавання кількості перевірок
    while j < len(str_pattern) and str_pattern[j] == str[i+j]:      # цикл, що проходить по підрядкам
        j += 1                              # перехід по елементам підрядка
        y += 2                              # додавання кількості перевірок

if j == len(str_pattern):                       # якщо кількість проходжень по підрядку дорівнює довжині підрядка, то елемент знайдений. Виводиться позиція і кількість перевірок
    print(f'Підрядок знайдений на позиції {i}. Кількість перевірок {y-1}')
else:                                           # в іншому випадку пірядок не знайдений і виводиться кількість перевірок
    print(f'Підрядок не знайдений. Кількість перевірок {y-1}')


# 3) Користувач вводить список і шуканий підрядок сам

while True:

    str = input('3) Рядок: ')                              # введення рядка
    str_pattern = input('   Підрядок: ')                   # введення підрядка
    i, j, y = -1, 0, 0                                  # i - відповідає за всі індекси рядка, j - відповідає за всі індекси підрядка, y - кількість перевірок

    while j < len(str_pattern) and i < (len(str) - len(str_pattern)):       # цикл, що проходить по рядкам
        j = 0                                           # j зануляється у зовнішньому циклі, оскільки відповідає за елементи підрядка
        i += 1                                          # перехід по елементам рядка
        y += 2                                          # додавання кількості перевірок
        while j < len(str_pattern) and str_pattern[j] == str[i + j]:        # цикл, що проходить по підрядкам
            j += 1                                      # перехід по елементам підрядка
            y += 2                                      # додавання кількості перевірок
    if j == len(str_pattern):                           # якщо кількість проходжень по підрядку дорівнює довжині підрядка, то елемент знайдений. Виводиться позиція і кількість перевірок
        print(f'Підрядок знайдений на позиції {i}. Кількість перевірок {y - 1}')
    else:                                               # в іншому випадку пірядок не знайдений і виводиться кількість перевірок
        print(f'Підрядок не знайдений. Кількість перевірок {y - 1}')

    answer = input('Restart? Yes - 1. No - other.')
    if answer == '1':
        continue
    else:
        break


# 4) Рандомний рядок і підрядок

import string
while True:

    str = ''.join(random.choice(string.ascii_letters) for _ in range(12))                  # генерація рядка з 12 букв за допомогою бібліотек random i string
    str_pattern = ''.join(random.choice(string.ascii_letters) for _ in range(3))           # генерація підрядка з 3 букв за допомогою бібліотек random i string
    print('4) Рядок: ', str)                            # виводи рядка і підрядка
    print('   Підрядок: ', str_pattern)
    i, j, y = -1, 0, 0                                  # i - відповідає за всі індекси рядка, j - відповідає за всі індекси підрядка, y - кількість перевірок

    while j < len(str_pattern) and i < (len(str) - len(str_pattern)):       # цикл, що проходить по рядкам
        j = 0                                           # j зануляється у зовнішньому циклі, оскільки відповідає за елементи підрядка
        i += 1                                          # перехід по елементам рядка
        y += 2                                          # додавання кількості перевірок
        while j < len(str_pattern) and str_pattern[j] == str[i + j]:        # цикл, що проходить по підрядкам
            j += 1                                      # перехід по елементам підрядка
            y += 2                                      # додавання кількості перевірок
    if j == len(str_pattern):                           # якщо кількість проходжень по підрядку дорівнює довжині підрядка, то елемент знайдений. Виводиться позиція і кількість перевірок
        print(f'Підрядок знайдений на позиції {i}. Кількість перевірок {y - 1}')
    else:                                               # в іншому випадку пірядок не знайдений і виводиться кількість перевірок
        print(f'Підрядок не знайдений. Кількість перевірок {y - 1}')

    answer = input('Restart? Yes - 1. No - other.')
    if answer == '1':
        continue
    else:
        break